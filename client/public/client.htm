<!DOCTYPE html>
<html>
<head>
  <title>SSHINO Terminal</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <style>
    html, body {
      background-color: #000;
      height: 100vh;
      width: 100vw;
      margin: 0;
      padding: 0;
      overflow: hidden;
      touch-action: pan-x pan-y;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
    .dropup-content {display: none;}
    
    /* Hide mobile keyboard buttons initially */
    #mobile-keys {
      transform: translateY(100%);
      transition: transform 0.3s ease-in-out;
    }
    
    #mobile-keys.visible {
      transform: translateY(0);
    }
    
    /* Mobile keyboard toggle button */
    #keyboard-toggle {
      position: fixed;
      bottom: 25px;
      right: 15px;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: linear-gradient(135deg, #00ff88, #00cc6a);
      border: none;
      color: #000;
      font-size: 1.2rem;
      font-weight: bold;
      box-shadow: 0 4px 15px rgba(0, 255, 136, 0.3);
      cursor: pointer;
      z-index: 1000;
      transition: all 0.3s ease;
      display: none;
    }
    
    #keyboard-toggle:active {
      transform: scale(0.95);
    }
    
    /* Show keyboard toggle on mobile */
    @media (max-width: 768px), (pointer: coarse) {
      #keyboard-toggle {
        display: block;
      }
    }
    
    /* Font size controls */
    #font-controls {
      position: fixed;
      top: 45px;
      right: 15px;
      display: none;
      flex-direction: column;
      gap: 8px;
      z-index: 999;
    }
    
    #font-controls.visible {
      display: flex;
    }
    
    .font-control-btn {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: rgba(40, 40, 40, 0.95);
      border: 1px solid rgba(0, 255, 136, 0.3);
      color: #00ff88;
      font-size: 1rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .font-control-btn:active {
      background: rgba(0, 255, 136, 0.2);
      transform: scale(0.95);
    }
    
    /* Quick actions for mobile */
    #quick-actions {
      position: fixed;
      bottom: 90px;
      right: 15px;
      display: none;
      flex-direction: column;
      gap: 10px;
      z-index: 999;
    }
    
    #quick-actions.visible {
      display: flex;
    }
    
    .quick-action-btn {
      width: 45px;
      height: 45px;
      border-radius: 50%;
      background: rgba(40, 40, 40, 0.95);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: #00ff88;
      font-size: 1.1rem;
      cursor: pointer;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
    }
    
    .quick-action-btn:active {
      background: rgba(60, 60, 60, 0.95);
      transform: scale(0.95);
    }
    
    /* Improved bottom bar for mobile */
    #bottomdiv {
      padding: 5px 10px;
      font-size: 0.85rem;
    }
    
    @media (max-width: 768px) {
      #bottomdiv {
        font-size: 0.75rem;
        padding: 3px 8px;
        height: 22px;
      }
      
      #menu {
        font-size: 0.85rem;
      }
      
      .dropup-content {
        font-size: 0.85rem;
        min-width: 140px;
      }
      
      .dropup-content a {
        padding: 8px 12px;
      }
      
      #font-controls {
        display: flex;
      }
    }
  </style>
  <link rel="stylesheet" href="/ssh/webssh2.css" />
  <link rel="icon" href="/ssh/favicon.ico" />
</head>
<body class="terminal-font-md">
  <div class="box">
    <div id="header"></div>
    <div id="terminal-container" class="terminal"></div>
    
    <!-- Mobile keyboard toggle button -->
    <button id="keyboard-toggle" onclick="toggleMobileKeyboard()" title="ÿ•ÿ∏Ÿáÿßÿ±/ÿ•ÿÆŸÅÿßÿ° ŸÑŸàÿ≠ÿ© ÿßŸÑŸÖŸÅÿßÿ™Ÿäÿ≠">‚å®Ô∏è</button>
    
    <!-- Font size controls -->
    <div id="font-controls">
      <button class="font-control-btn" onclick="decreaseFontSize()" title="ÿ™ÿµÿ∫Ÿäÿ± ÿßŸÑŸÜÿµ">A-</button>
      <button class="font-control-btn" onclick="increaseFontSize()" title="ÿ™ŸÉÿ®Ÿäÿ± ÿßŸÑŸÜÿµ">A+</button>
      <button class="font-control-btn" onclick="resetFontSize()" title="ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿßŸÑŸÜÿµ">A</button>
    </div>
    
    <!-- Quick actions for mobile -->
    <div id="quick-actions">
      <button class="quick-action-btn" onclick="sendCtrlC()" title="ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿπŸÖŸÑŸäÿ©">‚úï</button>
      <button class="quick-action-btn" onclick="clearScreen()" title="ŸÖÿ≥ÿ≠ ÿßŸÑÿ¥ÿßÿ¥ÿ©">üßπ</button>
      <button class="quick-action-btn" onclick="toggleFullscreen()" title="ŸÖŸÑÿ° ÿßŸÑÿ¥ÿßÿ¥ÿ©">‚õ∂</button>
      <button class="quick-action-btn" onclick="showConnectionInfo()" title="ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿßÿ™ÿµÿßŸÑ">‚ÑπÔ∏è</button>
    </div>
    
    <!-- Enhanced mobile keys -->
    <div id="mobile-keys">
      <div class="key-row">
        <button class="key-btn special" data-key="Escape" title="ŸÖŸÅÿ™ÿßÿ≠ ÿßŸÑŸáÿ±Ÿàÿ®">ESC</button>
        <button class="key-btn special modifier" data-key="Control" title="ÿ™ÿ≠ŸÉŸÖ">CTRL</button>
        <button class="key-btn special modifier" data-key="Alt" title="ÿ®ÿØŸäŸÑ">ALT</button>
        <button class="key-btn special" data-key="Tab" title="ÿ¨ÿØŸàŸÑÿ©">TAB</button>
        <button class="key-btn" data-char="|" title="ÿ£ŸÜÿ®Ÿàÿ®">|</button>
        <button class="key-btn" data-char="~" title="ÿ™ŸäŸÑÿØÿß">~</button>
      </div>
      <div class="key-row">
        <button class="key-btn arrow" data-key="ArrowUp" title="ÿ£ÿπŸÑŸâ">‚Üë</button>
        <button class="key-btn arrow" data-key="ArrowDown" title="ÿ£ÿ≥ŸÅŸÑ">‚Üì</button>
        <button class="key-btn arrow" data-key="ArrowLeft" title="Ÿäÿ≥ÿßÿ±">‚Üê</button>
        <button class="key-btn arrow" data-key="ArrowRight" title="ŸäŸÖŸäŸÜ">‚Üí</button>
        <button class="key-btn" data-char="/" title="ÿ¥ÿ±ÿ∑ÿ© ŸÖÿßÿ¶ŸÑÿ©">/</button>
        <button class="key-btn" data-char="-" title="ÿ¥ÿ±ÿ∑ÿ©">-</button>
      </div>
      <div class="key-row">
        <button class="key-btn" data-key="Enter" title="ÿ•ÿØÿÆÿßŸÑ">‚èé</button>
        <button class="key-btn" data-key="Backspace" title="ŸÖÿ≥ÿ≠">‚å´</button>
        <button class="key-btn" data-char=" " title="ŸÖÿ≥ÿßŸÅÿ©">___</button>
        <button class="key-btn" data-char="." title="ŸÜŸÇÿ∑ÿ©">.</button>
        <button class="key-btn" data-char=":" title="ŸÜŸÇÿ∑ÿ™ÿßŸÜ">:</button>
        <button class="key-btn hide-keyboard" onclick="toggleMobileKeyboard()" title="ÿ•ÿÆŸÅÿßÿ°">‚úï</button>
      </div>
    </div>
    
    <div id="bottomdiv">
      <div class="dropup" id="menu">
        <i class="fas fa-bars fa-fw"></i> ÿßŸÑŸÇÿßÿ¶ŸÖÿ©
        <div id="dropupContent" class="dropup-content">
          <a id="logBtn"><i class="fas fa-clipboard fa-fw"></i> ÿ®ÿØÿ° ÿßŸÑÿ≥ÿ¨ŸÑ</a>
          <a id="downloadLogBtn"><i class="fas fa-download fa-fw"></i> ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ≥ÿ¨ŸÑ</a>
          <a id="reauthBtn" style="display: none;"><i class="fas fa-key fa-fw"></i> ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ</a>
          <a id="credentialsBtn" style="display: none;"><i class="fas fa-key fa-fw"></i> ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿßÿπÿ™ŸÖÿßÿØ</a>
        </div>
      </div>
      <div id="footer"></div>
      <div id="status"></div>
      <div id="countdown"></div>
    </div>
  </div>
  
  <script>
    let mobileKeyboardVisible = false;
    let quickActionsVisible = false;
    let modifierPressed = {};
    let currentFontSize = 'md';
    const fontSizes = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];
    
    function toggleMobileKeyboard() {
      const mobileKeys = document.getElementById('mobile-keys');
      const keyboardToggle = document.getElementById('keyboard-toggle');
      
      mobileKeyboardVisible = !mobileKeyboardVisible;
      
      if (mobileKeyboardVisible) {
        mobileKeys.classList.add('visible');
        keyboardToggle.innerHTML = '‚úï';
        keyboardToggle.style.background = 'linear-gradient(135deg, #ff4444, #cc3333)';
      } else {
        mobileKeys.classList.remove('visible');
        keyboardToggle.innerHTML = '‚å®Ô∏è';
        keyboardToggle.style.background = 'linear-gradient(135deg, #00ff88, #00cc6a)';
        resetModifiers();
      }
      updateBodyClass();
    }
    
    function toggleQuickActions() {
      const quickActions = document.getElementById('quick-actions');
      quickActionsVisible = !quickActionsVisible;
      
      if (quickActionsVisible) {
        quickActions.classList.add('visible');
      } else {
        quickActions.classList.remove('visible');
      }
    }
    
    function resetModifiers() {
      modifierPressed = {};
      document.querySelectorAll('.modifier').forEach(btn => {
        btn.classList.remove('active');
      });
    }
    
    function sendCtrlC() {
      if (window.term) {
        window.term.write('\u0003');
      }
    }
    
    function clearScreen() {
      if (window.term) {
        window.term.write('\u000C');
      }
    }
    
    function toggleFullscreen() {
      if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen();
      } else {
        document.exitFullscreen();
      }
    }
    
    function showConnectionInfo() {
      const status = document.getElementById('status');
      if (status) {
        alert('ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿßÿ™ÿµÿßŸÑ:\n' + status.textContent);
      }
    }
    
    // Font size control functions
    function increaseFontSize() {
      const currentIndex = fontSizes.indexOf(currentFontSize);
      if (currentIndex < fontSizes.length - 1) {
        currentFontSize = fontSizes[currentIndex + 1];
        updateFontSize();
        vibrate(20);
      }
    }
    
    function decreaseFontSize() {
      const currentIndex = fontSizes.indexOf(currentFontSize);
      if (currentIndex > 0) {
        currentFontSize = fontSizes[currentIndex - 1];
        updateFontSize();
        vibrate(20);
      }
    }
    
    function resetFontSize() {
      currentFontSize = 'md';
      updateFontSize();
      vibrate(30);
    }
    
    function updateFontSize() {
      document.body.className = document.body.className.replace(/terminal-font-\w+/g, '');
      document.body.classList.add('terminal-font-' + currentFontSize);
      
      // Trigger terminal resize if available
      setTimeout(() => {
        if (window.term && window.term.fit) {
          window.term.fit();
        }
      }, 100);
    }
    
    // Handle keyboard visibility for better terminal sizing
    function updateBodyClass() {
      if (mobileKeyboardVisible) {
        document.body.classList.add('keyboard-visible');
      } else {
        document.body.classList.remove('keyboard-visible');
      }
    }
    
    // Long press on keyboard toggle shows quick actions
    let longPressTimer;
    document.getElementById('keyboard-toggle').addEventListener('touchstart', function(e) {
      longPressTimer = setTimeout(() => {
        toggleQuickActions();
        navigator.vibrate && navigator.vibrate(50);
      }, 500);
    });
    
    document.getElementById('keyboard-toggle').addEventListener('touchend', function(e) {
      clearTimeout(longPressTimer);
    });
    
    // Mobile keyboard functionality
    document.addEventListener('DOMContentLoaded', function() {
      const keyButtons = document.querySelectorAll('.key-btn');
      
      keyButtons.forEach(button => {
        button.addEventListener('touchstart', function(e) {
          e.preventDefault();
          this.classList.add('active');
          
          if (this.classList.contains('modifier')) {
            const key = this.dataset.key;
            if (modifierPressed[key]) {
              modifierPressed[key] = false;
              this.classList.remove('active');
            } else {
              modifierPressed[key] = true;
            }
            return;
          }
          
          if (window.term) {
            if (this.dataset.char) {
              let char = this.dataset.char;
              if (char === '___') char = ' ';
              
              if (modifierPressed.Control) {
                if (char === 'c') char = '\u0003';
                if (char === 'z') char = '\u001A';
                if (char === 'd') char = '\u0004';
              }
              
              window.term.write(char);
            } else if (this.dataset.key) {
              const keyEvent = new KeyboardEvent('keydown', {
                key: this.dataset.key,
                ctrlKey: modifierPressed.Control || false,
                altKey: modifierPressed.Alt || false
              });
              window.term._core._inputHandler.onKeyDown(keyEvent);
            }
          }
          
          if (!this.classList.contains('modifier')) {
            resetModifiers();
          }
        });
        
        button.addEventListener('touchend', function(e) {
          e.preventDefault();
          if (!this.classList.contains('modifier')) {
            this.classList.remove('active');
          }
        });
      });
    });
    
    // Handle orientation change
    window.addEventListener('orientationchange', function() {
      setTimeout(() => {
        if (window.term && window.term.fit) {
          window.term.fit();
        }
        updateBodyClass();
      }, 500);
    });
    
    // Double tap to toggle fullscreen on terminal
    let lastTap = 0;
    document.getElementById('terminal-container').addEventListener('touchend', function(e) {
      const currentTime = new Date().getTime();
      const tapLength = currentTime - lastTap;
      
      if (tapLength < 500 && tapLength > 0) {
        toggleFullscreen();
        e.preventDefault();
      }
      lastTap = currentTime;
    });
    
    // Haptic feedback function
    function vibrate(pattern = 10) {
      if (navigator.vibrate) {
        navigator.vibrate(pattern);
      }
    }
    
    // Add vibration to button presses
    document.addEventListener('touchstart', function(e) {
      if (e.target.matches('.key-btn, .quick-action-btn, #keyboard-toggle, .font-control-btn')) {
        vibrate(10);
      }
    });
  </script>
  
<script src="/ssh/webssh2.bundle.js" defer></script>
</body>
</html>
