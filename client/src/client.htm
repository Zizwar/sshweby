<!DOCTYPE html>
<html>
<head>
  <title>SSHINO Terminal</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <style>
    html, body {
      background-color: #000;
      height: 100vh;
      width: 100vw;
      margin: 0;
      padding: 0;
      overflow: hidden;
      touch-action: pan-x pan-y;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
    .dropup-content {display: none;}
    
    /* Enhanced mobile keys - Full keyboard layout */
    #mobile-keys {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background: linear-gradient(135deg, #2a2a2a 0%, #1e1e1e 100%);
      border-top: 2px solid rgba(0, 255, 136, 0.3);
      padding: 10px 8px;
      transform: translateY(100%);
      transition: transform 0.3s ease-in-out;
      z-index: 2000;
      max-height: 50vh;
      overflow-y: auto;
      box-shadow: 0 -10px 30px rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(10px);
    }
    
    #mobile-keys.visible {
      transform: translateY(0);
    }
    
    .key-row {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 4px;
      margin-bottom: 6px;
    }
    
    .key-btn {
      min-width: 35px;
      height: 40px;
      border-radius: 8px;
      background: linear-gradient(135deg, #404040, #2a2a2a);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: #fff;
      font-size: 0.85rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0 8px;
      user-select: none;
      -webkit-tap-highlight-color: transparent;
    }
    
    .key-btn:active, .key-btn.active {
      background: linear-gradient(135deg, #00ff88, #00cc6a);
      color: #000;
      transform: scale(0.95);
      box-shadow: 0 2px 8px rgba(0, 255, 136, 0.3);
    }
    
    .key-btn.special {
      background: linear-gradient(135deg, #0066cc, #004499);
      min-width: 45px;
    }
    
    .key-btn.modifier {
      background: linear-gradient(135deg, #cc6600, #994400);
    }
    
    .key-btn.arrow {
      background: linear-gradient(135deg, #6600cc, #440099);
      width: 40px;
    }
    
    .key-btn.wide {
      flex: 1;
      min-width: 60px;
    }
    
    .keyboard-label {
      text-align: center;
      color: #00ff88;
      font-size: 0.8rem;
      margin-bottom: 5px;
      font-weight: bold;
    }
    
    /* Mobile keyboard toggle button */
    #keyboard-toggle {
      position: fixed;
      bottom: 25px;
      right: 15px;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: linear-gradient(135deg, #00ff88, #00cc6a);
      border: none;
      color: #000;
      font-size: 1.2rem;
      font-weight: bold;
      box-shadow: 0 4px 15px rgba(0, 255, 136, 0.3);
      cursor: pointer;
      z-index: 1000;
      transition: all 0.3s ease;
      display: none;
    }
    
    #keyboard-toggle:active {
      transform: scale(0.95);
    }
    
    /* Show keyboard toggle on mobile */
    @media (max-width: 768px), (pointer: coarse) {
      #keyboard-toggle {
        display: block;
      }
    }
    
    /* Font size controls */
    #font-controls {
      position: fixed;
      top: 45px;
      right: 15px;
      display: none;
      flex-direction: column;
      gap: 8px;
      z-index: 999;
    }
    
    #font-controls.visible {
      display: flex;
    }
    
    .font-control-btn {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: rgba(40, 40, 40, 0.95);
      border: 1px solid rgba(0, 255, 136, 0.3);
      color: #00ff88;
      font-size: 1rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .font-control-btn:active {
      background: rgba(0, 255, 136, 0.2);
      transform: scale(0.95);
    }
    
    /* Quick actions for mobile */
    #quick-actions {
      position: fixed;
      bottom: 90px;
      right: 15px;
      display: none;
      flex-direction: column;
      gap: 10px;
      z-index: 999;
    }
    
    #quick-actions.visible {
      display: flex;
    }
    
    .quick-action-btn {
      width: 45px;
      height: 45px;
      border-radius: 50%;
      background: rgba(40, 40, 40, 0.95);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: #00ff88;
      font-size: 1.1rem;
      cursor: pointer;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
    }
    
    .quick-action-btn:active {
      background: rgba(60, 60, 60, 0.95);
      transform: scale(0.95);
    }
    
    /* Improved bottom bar for mobile */
    #bottomdiv {
      padding: 5px 10px;
      font-size: 0.85rem;
    }
    
    @media (max-width: 768px) {
      #bottomdiv {
        font-size: 0.75rem;
        padding: 3px 8px;
        height: 22px;
      }
      
      #menu {
        font-size: 0.85rem;
      }
      
      .dropup-content {
        font-size: 0.85rem;
        min-width: 140px;
      }
      
      .dropup-content a {
        padding: 8px 12px;
      }
      
      #font-controls {
        display: flex;
      }
    }
    
    /* Font size override for better control */
    body.terminal-font-xs .terminal, 
    body.terminal-font-xs #terminal-container .terminal,
    body.terminal-font-xs .xterm { font-size: 10px !important; }
    
    body.terminal-font-sm .terminal, 
    body.terminal-font-sm #terminal-container .terminal,
    body.terminal-font-sm .xterm { font-size: 12px !important; }
    
    body.terminal-font-md .terminal, 
    body.terminal-font-md #terminal-container .terminal,
    body.terminal-font-md .xterm { font-size: 14px !important; }
    
    body.terminal-font-lg .terminal, 
    body.terminal-font-lg #terminal-container .terminal,
    body.terminal-font-lg .xterm { font-size: 16px !important; }
    
    body.terminal-font-xl .terminal, 
    body.terminal-font-xl #terminal-container .terminal,
    body.terminal-font-xl .xterm { font-size: 18px !important; }
    
    body.terminal-font-xxl .terminal, 
    body.terminal-font-xxl #terminal-container .terminal,
    body.terminal-font-xxl .xterm { font-size: 20px !important; }
    
    @media (max-width: 768px) {
      body.terminal-font-xs .terminal, 
      body.terminal-font-xs #terminal-container .terminal,
      body.terminal-font-xs .xterm { font-size: 8px !important; }
      
      body.terminal-font-sm .terminal, 
      body.terminal-font-sm #terminal-container .terminal,
      body.terminal-font-sm .xterm { font-size: 10px !important; }
      
      body.terminal-font-md .terminal, 
      body.terminal-font-md #terminal-container .terminal,
      body.terminal-font-md .xterm { font-size: 12px !important; }
      
      body.terminal-font-lg .terminal, 
      body.terminal-font-lg #terminal-container .terminal,
      body.terminal-font-lg .xterm { font-size: 14px !important; }
      
      body.terminal-font-xl .terminal, 
      body.terminal-font-xl #terminal-container .terminal,
      body.terminal-font-xl .xterm { font-size: 16px !important; }
      
      body.terminal-font-xxl .terminal, 
      body.terminal-font-xxl #terminal-container .terminal,
      body.terminal-font-xxl .xterm { font-size: 18px !important; }
    }
  </style>
  <link rel="stylesheet" href="/ssh/webssh2.css" />
  <link rel="icon" href="/ssh/favicon.ico" />
</head>
<body class="terminal-font-md">
  <div class="box">
    <div id="header"></div>
    <div id="terminal-container" class="terminal"></div>
    
    <!-- Mobile keyboard toggle button -->
    <button id="keyboard-toggle" onclick="toggleMobileKeyboard()" title="ÿ•ÿ∏Ÿáÿßÿ±/ÿ•ÿÆŸÅÿßÿ° ŸÑŸàÿ≠ÿ© ÿßŸÑŸÖŸÅÿßÿ™Ÿäÿ≠">‚å®Ô∏è</button>
    
    <!-- Font size controls -->
    <div id="font-controls">
      <button class="font-control-btn" onclick="decreaseFontSize()" title="ÿ™ÿµÿ∫Ÿäÿ± ÿßŸÑŸÜÿµ">A-</button>
      <button class="font-control-btn" onclick="increaseFontSize()" title="ÿ™ŸÉÿ®Ÿäÿ± ÿßŸÑŸÜÿµ">A+</button>
      <button class="font-control-btn" onclick="resetFontSize()" title="ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿßŸÑŸÜÿµ">A</button>
    </div>
    
    <!-- Hidden input for Android keyboard -->
    <input type="text" id="android-input" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" inputmode="text" style="position: absolute; left: -9999px; opacity: 0; pointer-events: none; z-index: -1;">

    <!-- Quick actions for mobile -->
    <div id="quick-actions">
      <button class="quick-action-btn" onclick="useAndroidKeyboard()" title="ŸÑŸàÿ≠ÿ© ŸÖŸÅÿßÿ™Ÿäÿ≠ ÿßŸÑÿ£ŸÜÿØÿ±ŸàŸäÿØ">üì±</button>
      <button class="quick-action-btn" onclick="sendCtrlC()" title="ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿπŸÖŸÑŸäÿ©">‚úï</button>
      <button class="quick-action-btn" onclick="clearScreen()" title="ŸÖÿ≥ÿ≠ ÿßŸÑÿ¥ÿßÿ¥ÿ©">üßπ</button>
      <button class="quick-action-btn" onclick="toggleFullscreen()" title="ŸÖŸÑÿ° ÿßŸÑÿ¥ÿßÿ¥ÿ©">‚õ∂</button>
      <button class="quick-action-btn" onclick="showConnectionInfo()" title="ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿßÿ™ÿµÿßŸÑ">‚ÑπÔ∏è</button>
    </div>
    
    <!-- Enhanced mobile keys - Complete keyboard -->
    <div id="mobile-keys">
      <div class="keyboard-label">‚å®Ô∏è ŸÑŸàÿ≠ÿ© ÿßŸÑŸÖŸÅÿßÿ™Ÿäÿ≠ ÿßŸÑŸÖÿÆÿµÿµÿ©</div>
      
      <!-- Function Keys Row -->
      <div class="key-row">
        <button class="key-btn special" data-key="Escape" title="ŸÖŸÅÿ™ÿßÿ≠ ÿßŸÑŸáÿ±Ÿàÿ®">ESC</button>
        <button class="key-btn special" data-key="Tab" title="ÿ¨ÿØŸàŸÑÿ©">TAB</button>
        <button class="key-btn special modifier" data-key="Control" title="ÿ™ÿ≠ŸÉŸÖ">CTRL</button>
        <button class="key-btn special modifier" data-key="Alt" title="ÿ®ÿØŸäŸÑ">ALT</button>
        <button class="key-btn special" data-key="Backspace" title="ŸÖÿ≥ÿ≠">‚å´</button>
      </div>
      
      <!-- Numbers Row -->
      <div class="key-row">
        <button class="key-btn" data-char="1">1</button>
        <button class="key-btn" data-char="2">2</button>
        <button class="key-btn" data-char="3">3</button>
        <button class="key-btn" data-char="4">4</button>
        <button class="key-btn" data-char="5">5</button>
        <button class="key-btn" data-char="6">6</button>
        <button class="key-btn" data-char="7">7</button>
        <button class="key-btn" data-char="8">8</button>
        <button class="key-btn" data-char="9">9</button>
        <button class="key-btn" data-char="0">0</button>
      </div>
      
      <!-- Special Characters Row 1 -->
      <div class="key-row">
        <button class="key-btn" data-char="`" title="backtick">`</button>
        <button class="key-btn" data-char="@" title="at">@</button>
        <button class="key-btn" data-char="#" title="hash">#</button>
        <button class="key-btn" data-char="$" title="dollar">$</button>
        <button class="key-btn" data-char="%" title="percent">%</button>
        <button class="key-btn" data-char="&" title="ampersand">&</button>
        <button class="key-btn" data-char="*" title="asterisk">*</button>
        <button class="key-btn" data-char="!" title="exclamation">!</button>
      </div>
      
      <!-- Special Characters Row 2 -->
      <div class="key-row">
        <button class="key-btn" data-char="|" title="pipe">|</button>
        <button class="key-btn" data-char="~" title="tilde">~</button>
        <button class="key-btn" data-char="/" title="slash">/</button>
        <button class="key-btn" data-char="-" title="dash">-</button>
        <button class="key-btn" data-char="_" title="underscore">_</button>
        <button class="key-btn" data-char="=" title="equals">=</button>
        <button class="key-btn" data-char="+" title="plus">+</button>
        <button class="key-btn" data-char="^" title="caret">^</button>
      </div>
      
      <!-- Brackets & Quotes Row -->
      <div class="key-row">
        <button class="key-btn" data-char="(" title="open parenthesis">(</button>
        <button class="key-btn" data-char=")" title="close parenthesis">)</button>
        <button class="key-btn" data-char="[" title="open bracket">[</button>
        <button class="key-btn" data-char="]" title="close bracket">]</button>
        <button class="key-btn" data-char="{" title="open brace">{</button>
        <button class="key-btn" data-char="}" title="close brace">}</button>
        <button class="key-btn" data-char='"' title="double quote">"</button>
        <button class="key-btn" data-char="'" title="single quote">'</button>
      </div>
      
      <!-- Punctuation Row -->
      <div class="key-row">
        <button class="key-btn" data-char="." title="dot">.</button>
        <button class="key-btn" data-char="," title="comma">,</button>
        <button class="key-btn" data-char=":" title="colon">:</button>
        <button class="key-btn" data-char=";" title="semicolon">;</button>
        <button class="key-btn" data-char="?" title="question">?</button>
        <button class="key-btn" data-char="<" title="less than"><</button>
        <button class="key-btn" data-char=">" title="greater than">></button>
        <button class="key-btn" data-char="\\" title="backslash">\</button>
      </div>
      
      <!-- Navigation & Actions Row -->
      <div class="key-row">
        <button class="key-btn arrow" data-key="ArrowUp" title="ÿ£ÿπŸÑŸâ">‚Üë</button>
        <button class="key-btn arrow" data-key="ArrowDown" title="ÿ£ÿ≥ŸÅŸÑ">‚Üì</button>
        <button class="key-btn arrow" data-key="ArrowLeft" title="Ÿäÿ≥ÿßÿ±">‚Üê</button>
        <button class="key-btn arrow" data-key="ArrowRight" title="ŸäŸÖŸäŸÜ">‚Üí</button>
        <button class="key-btn special" data-key="Enter" title="ÿ•ÿØÿÆÿßŸÑ">‚èé</button>
        <button class="key-btn wide" data-char=" " title="ŸÖÿ≥ÿßŸÅÿ©">ŸÖÿ≥ÿßŸÅÿ©</button>
      </div>
      
      <!-- Close Button -->
      <div class="key-row">
        <button class="key-btn special" onclick="toggleMobileKeyboard()" title="ÿ•ÿÆŸÅÿßÿ° ŸÑŸàÿ≠ÿ© ÿßŸÑŸÖŸÅÿßÿ™Ÿäÿ≠" style="background: linear-gradient(135deg, #ff4444, #cc3333); flex: 1;">‚úï ÿ•ÿ∫ŸÑÿßŸÇ ŸÑŸàÿ≠ÿ© ÿßŸÑŸÖŸÅÿßÿ™Ÿäÿ≠</button>
      </div>
    </div>
    
    <div id="bottomdiv">
      <div class="dropup" id="menu">
        <i class="fas fa-bars fa-fw"></i> ÿßŸÑŸÇÿßÿ¶ŸÖÿ©
        <div id="dropupContent" class="dropup-content">
          <a id="logBtn"><i class="fas fa-clipboard fa-fw"></i> ÿ®ÿØÿ° ÿßŸÑÿ≥ÿ¨ŸÑ</a>
          <a id="downloadLogBtn"><i class="fas fa-download fa-fw"></i> ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ≥ÿ¨ŸÑ</a>
          <a id="reauthBtn" style="display: none;"><i class="fas fa-key fa-fw"></i> ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ</a>
          <a id="credentialsBtn" style="display: none;"><i class="fas fa-key fa-fw"></i> ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿßÿπÿ™ŸÖÿßÿØ</a>
        </div>
      </div>
      <div id="footer"></div>
      <div id="status"></div>
      <div id="countdown"></div>
    </div>
  </div>
  
  <script>
    let mobileKeyboardVisible = false;
    let quickActionsVisible = false;
    let modifierPressed = {};
    let currentFontSize = 'md';
    const fontSizes = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];
    
    function toggleMobileKeyboard() {
      const mobileKeys = document.getElementById('mobile-keys');
      const keyboardToggle = document.getElementById('keyboard-toggle');
      
      mobileKeyboardVisible = !mobileKeyboardVisible;
      
      if (mobileKeyboardVisible) {
        mobileKeys.classList.add('visible');
        keyboardToggle.innerHTML = '‚úï';
        keyboardToggle.style.background = 'linear-gradient(135deg, #ff4444, #cc3333)';
      } else {
        mobileKeys.classList.remove('visible');
        keyboardToggle.innerHTML = '‚å®Ô∏è';
        keyboardToggle.style.background = 'linear-gradient(135deg, #00ff88, #00cc6a)';
        resetModifiers();
      }
      updateBodyClass();
    }
    
    function toggleQuickActions() {
      const quickActions = document.getElementById('quick-actions');
      quickActionsVisible = !quickActionsVisible;
      
      if (quickActionsVisible) {
        quickActions.classList.add('visible');
      } else {
        quickActions.classList.remove('visible');
      }
    }
    
    function resetModifiers() {
      modifierPressed = {};
      document.querySelectorAll('.modifier').forEach(btn => {
        btn.classList.remove('active');
      });
    }
    
    function sendCtrlC() {
      if (window.term) {
        window.term.write('\u0003');
      }
    }
    
    function clearScreen() {
      if (window.term) {
        window.term.write('\u000C');
      }
    }
    
    function toggleFullscreen() {
      if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen();
      } else {
        document.exitFullscreen();
      }
    }
    
    function showConnectionInfo() {
      const status = document.getElementById('status');
      if (status) {
        alert('ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿßÿ™ÿµÿßŸÑ:\n' + status.textContent);
      }
    }
    
    // Font size control functions
    function increaseFontSize() {
      const currentIndex = fontSizes.indexOf(currentFontSize);
      if (currentIndex < fontSizes.length - 1) {
        currentFontSize = fontSizes[currentIndex + 1];
        updateFontSize();
        vibrate(20);
      }
    }
    
    function decreaseFontSize() {
      const currentIndex = fontSizes.indexOf(currentFontSize);
      if (currentIndex > 0) {
        currentFontSize = fontSizes[currentIndex - 1];
        updateFontSize();
        vibrate(20);
      }
    }
    
    function resetFontSize() {
      currentFontSize = 'md';
      updateFontSize();
      vibrate(30);
    }
    
    function updateFontSize() {
      // Remove previous font size classes from body
      document.body.className = document.body.className.replace(/terminal-font-\w+/g, '');
      document.body.classList.add('terminal-font-' + currentFontSize);
      
      // Also apply to terminal container directly for better compatibility
      const terminalContainer = document.getElementById('terminal-container');
      if (terminalContainer) {
        terminalContainer.className = terminalContainer.className.replace(/terminal-font-\w+/g, '');
        terminalContainer.classList.add('terminal-font-' + currentFontSize);
      }
      
      // Apply to .terminal class specifically
      const terminalElements = document.querySelectorAll('.terminal');
      terminalElements.forEach(el => {
        el.className = el.className.replace(/terminal-font-\w+/g, '');
        el.classList.add('terminal-font-' + currentFontSize);
      });
      
      // Trigger terminal resize and refresh
      setTimeout(() => {
        if (window.term) {
          if (window.term.fit) {
            window.term.fit();
          }
          // Force terminal refresh
          if (window.term.refresh) {
            window.term.refresh(0, window.term.rows - 1);
          }
          // Trigger resize event
          window.dispatchEvent(new Event('resize'));
        }
      }, 150);
      
      // Show visual feedback
      showFontSizeChange(currentFontSize);
    }
    
    function showFontSizeChange(size) {
      const sizeNames = {
        'xs': 'ÿµÿ∫Ÿäÿ± ÿ¨ÿØÿßŸã',
        'sm': 'ÿµÿ∫Ÿäÿ±',
        'md': 'ŸÖÿ™Ÿàÿ≥ÿ∑',
        'lg': 'ŸÉÿ®Ÿäÿ±',
        'xl': 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã',
        'xxl': 'ÿ∂ÿÆŸÖ'
      };
      
      // Create or update size indicator
      let indicator = document.getElementById('font-size-indicator');
      if (!indicator) {
        indicator = document.createElement('div');
        indicator.id = 'font-size-indicator';
        indicator.style.cssText = `
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background: rgba(0, 255, 136, 0.9);
          color: #000;
          padding: 15px 25px;
          border-radius: 10px;
          font-size: 16px;
          font-weight: bold;
          z-index: 9999;
          pointer-events: none;
          transition: all 0.3s ease;
        `;
        document.body.appendChild(indicator);
      }
      
      indicator.textContent = `ÿ≠ÿ¨ŸÖ ÿßŸÑÿÆÿ∑: ${sizeNames[size]}`;
      indicator.style.opacity = '1';
      indicator.style.transform = 'translate(-50%, -50%) scale(1)';
      
      // Hide after 2 seconds
      setTimeout(() => {
        indicator.style.opacity = '0';
        indicator.style.transform = 'translate(-50%, -50%) scale(0.8)';
      }, 2000);
    }
    
    // Handle keyboard visibility for better terminal sizing
    function updateBodyClass() {
      if (mobileKeyboardVisible) {
        document.body.classList.add('keyboard-visible');
      } else {
        document.body.classList.remove('keyboard-visible');
      }
    }
    
    // Long press on keyboard toggle shows quick actions
    let longPressTimer;
    document.getElementById('keyboard-toggle').addEventListener('touchstart', function(e) {
      longPressTimer = setTimeout(() => {
        toggleQuickActions();
        navigator.vibrate && navigator.vibrate(50);
      }, 500);
    });
    
    document.getElementById('keyboard-toggle').addEventListener('touchend', function(e) {
      clearTimeout(longPressTimer);
    });
    
    // Mobile keyboard functionality
    document.addEventListener('DOMContentLoaded', function() {
      const keyButtons = document.querySelectorAll('.key-btn');
      
      keyButtons.forEach(button => {
        button.addEventListener('touchstart', function(e) {
          e.preventDefault();
          this.classList.add('active');
          
          if (this.classList.contains('modifier')) {
            const key = this.dataset.key;
            if (modifierPressed[key]) {
              modifierPressed[key] = false;
              this.classList.remove('active');
            } else {
              modifierPressed[key] = true;
            }
            return;
          }
          
          if (window.term) {
            if (this.dataset.char) {
              let char = this.dataset.char;
              if (char === '___') char = ' ';
              
              if (modifierPressed.Control) {
                if (char === 'c') char = '\u0003';
                if (char === 'z') char = '\u001A';
                if (char === 'd') char = '\u0004';
              }
              
              window.term.write(char);
            } else if (this.dataset.key) {
              const keyEvent = new KeyboardEvent('keydown', {
                key: this.dataset.key,
                ctrlKey: modifierPressed.Control || false,
                altKey: modifierPressed.Alt || false
              });
              window.term._core._inputHandler.onKeyDown(keyEvent);
            }
          }
          
          if (!this.classList.contains('modifier')) {
            resetModifiers();
          }
        });
        
        button.addEventListener('touchend', function(e) {
          e.preventDefault();
          if (!this.classList.contains('modifier')) {
            this.classList.remove('active');
          }
        });
      });
    });
    
    // Handle orientation change
    window.addEventListener('orientationchange', function() {
      setTimeout(() => {
        if (window.term && window.term.fit) {
          window.term.fit();
        }
        updateBodyClass();
      }, 500);
    });
    
    // Double tap to toggle fullscreen on terminal
    let lastTap = 0;
    document.getElementById('terminal-container').addEventListener('touchend', function(e) {
      const currentTime = new Date().getTime();
      const tapLength = currentTime - lastTap;
      
      if (tapLength < 500 && tapLength > 0) {
        toggleFullscreen();
        e.preventDefault();
      }
      lastTap = currentTime;
    });
    
    // Haptic feedback function
    function vibrate(pattern = 10) {
      if (navigator.vibrate) {
        navigator.vibrate(pattern);
      }
    }
    
    // Add vibration to button presses
    document.addEventListener('touchstart', function(e) {
      if (e.target.matches('.key-btn, .quick-action-btn, #keyboard-toggle, .font-control-btn')) {
        vibrate(10);
      }
    });
    
    // Arabic text processing function
    function normalizeArabicText(text) {
      if (!text) return text;
      
      // Basic Arabic text normalization
      let normalized = text;
      
      // Handle Arabic diacritics and special characters
      const arabicNormalization = {
        'Ôª∑': 'ŸÑÿß',
        'Ôªª': 'ŸÑÿß',
        'Ôªπ': 'ŸÑÿ•',
        'Ôª±': 'Ÿä',
        'ÔªØ': 'Ÿâ',
        'Ôª©': 'Ÿá'
      };
      
      Object.entries(arabicNormalization).forEach(([from, to]) => {
        normalized = normalized.replace(new RegExp(from, 'g'), to);
      });
      
      // Ensure proper UTF-8 encoding for Arabic
      return normalized;
    }
    
    // Android keyboard functionality
    let usingAndroidKeyboard = false;
    
    function useAndroidKeyboard() {
      const androidInput = document.getElementById('android-input');
      
      if (usingAndroidKeyboard) {
        usingAndroidKeyboard = false;
        androidInput.style.position = 'absolute';
        androidInput.style.left = '-9999px';
        androidInput.style.opacity = '0';
        androidInput.style.pointerEvents = 'none';
        androidInput.blur();
        return;
      }
      
      usingAndroidKeyboard = true;
      
      androidInput.style.position = 'fixed';
      androidInput.style.bottom = '80px';
      androidInput.style.left = '50%';
      androidInput.style.transform = 'translateX(-50%)';
      androidInput.style.opacity = '1';
      androidInput.style.pointerEvents = 'auto';
      androidInput.style.zIndex = '1500';
      androidInput.style.width = '280px';
      androidInput.style.height = '45px';
      androidInput.style.background = 'rgba(0, 255, 136, 0.15)';
      androidInput.style.border = '2px solid rgba(0, 255, 136, 0.6)';
      androidInput.style.borderRadius = '12px';
      androidInput.style.padding = '10px 15px';
      androidInput.style.color = '#00ff88';
      androidInput.style.textAlign = 'center';
      androidInput.style.fontSize = '16px';
      androidInput.style.fontFamily = 'monospace';
      androidInput.style.direction = 'ltr';
      androidInput.style.unicodeBidi = 'plaintext';
      androidInput.placeholder = 'ÿßŸÉÿ™ÿ® ŸáŸÜÿß...';
      androidInput.value = '';
      
      // Enable better text composition for Arabic
      androidInput.style.imeMode = 'active';
      androidInput.style.compositionMode = 'auto';
      
      setTimeout(() => {
        androidInput.focus();
        androidInput.click();
      }, 100);
    }
    
    // Android keyboard input handling
    document.addEventListener('DOMContentLoaded', function() {
      const androidInput = document.getElementById('android-input');
      let lastValue = '';
      
      androidInput.addEventListener('input', function(e) {
        if (usingAndroidKeyboard && window.term) {
          const value = e.target.value;
          if (value !== lastValue) {
            // Handle Arabic text properly - convert to proper encoding
            let newChars = value.slice(lastValue.length);
            
            // Process Arabic characters and special handling
            if (newChars) {
              // Normalize Arabic text
              newChars = normalizeArabicText(newChars);
              
              if (window.socket) {
                window.socket.emit('data', newChars);
              } else if (window.term) {
                window.term.write(newChars);
              }
            }
            lastValue = value;
            
            // Clear input when it gets too long
            if (value.length > 50) {
              setTimeout(() => {
                e.target.value = '';
                lastValue = '';
              }, 100);
            }
          }
        }
      });
      
      // Handle composition events for better Arabic support
      androidInput.addEventListener('compositionstart', function(e) {
        if (usingAndroidKeyboard) {
          // Disable regular input handling during composition
          e.target.setAttribute('data-composing', 'true');
        }
      });
      
      androidInput.addEventListener('compositionend', function(e) {
        if (usingAndroidKeyboard) {
          e.target.removeAttribute('data-composing');
          // Trigger input event manually after composition
          e.target.dispatchEvent(new Event('input', { bubbles: true }));
        }
      });
      
      androidInput.addEventListener('keydown', function(e) {
        if (usingAndroidKeyboard) {
          let key = null;
          if (e.key === 'Enter') {
            e.preventDefault();
            key = '\r';
          } else if (e.key === 'Backspace') {
            e.preventDefault();
            key = '\b';
          } else if (e.key === 'Tab') {
            e.preventDefault();
            key = '\t';
          }
          
          if (key) {
            if (window.socket) {
              window.socket.emit('data', key);
            } else if (window.term) {
              window.term.write(key);
            }
          }
        }
      });
    });
    
    // Page exit warning to prevent losing SSH connection
    let connectionActive = false;
    
    // Set connection as active when socket connects
    window.addEventListener('DOMContentLoaded', function() {
      // Wait for WebSocket connection
      setTimeout(() => {
        if (window.socket && window.socket.connected) {
          connectionActive = true;
        }
      }, 2000);
    });
    
    // Warning before page unload
    window.addEventListener('beforeunload', function(e) {
      if (connectionActive) {
        const confirmationMessage = 'ŸÑÿØŸäŸÉ ÿßÿ™ÿµÿßŸÑ SSH ŸÜÿ¥ÿ∑. ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ŸÖÿ∫ÿßÿØÿ±ÿ© ÿßŸÑÿµŸÅÿ≠ÿ©ÿü ÿ≥ÿ™ŸÅŸÇÿØ ÿßŸÑÿßÿ™ÿµÿßŸÑ Ÿàÿ™ÿ≠ÿ™ÿßÿ¨ ŸÑŸÑÿßÿ™ÿµÿßŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.';
        e.returnValue = confirmationMessage;
        return confirmationMessage;
      }
    });
    
    // Handle browser back/forward buttons
    window.addEventListener('popstate', function(e) {
      if (connectionActive) {
        const userConfirm = confirm('ŸÑÿØŸäŸÉ ÿßÿ™ÿµÿßŸÑ SSH ŸÜÿ¥ÿ∑. ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿßŸÑÿπŸàÿØÿ© ŸÑŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©ÿü\n\nÿ≥ÿ™ŸÅŸÇÿØ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿßŸÑÿ≠ÿßŸÑŸä Ÿàÿ™ÿ≠ÿ™ÿßÿ¨ ŸÑŸÑÿßÿ™ÿµÿßŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.');
        if (!userConfirm) {
          // Push current state back to prevent navigation
          history.pushState(null, null, window.location.href);
        } else {
          connectionActive = false;
        }
      }
    });
    
    // Initialize history state
    history.pushState(null, null, window.location.href);
  </script>
  
<script src="/ssh/webssh2.bundle.js" defer></script>
</body>
</html>
